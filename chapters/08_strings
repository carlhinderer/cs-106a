-------------------------------------------------
CHAPTER 8 - STRINGS
-------------------------------------------------

- Enumerated Types

    - 'Enumeration' is the process of listing all the elements in the domain of a type.
    - An 'enumerated type' is defined by listing all the domain's elements.


    // In the early days of Java, programmers implemented the enumerations by
    //   assigning integers.
    public static final int SINGLE = 1;
    public static final int MARRIED_JOINT = 2;
    public static final int MARRIED_SEPARATE = 3;
    public static final int HEAD_OF_HOUSEHOLD = 4;
    public static final int WIDOW_OR_WIDOWER = 5;

    if(filingStatus == SINGLE) ...


    // In Java 5+, the enum type can be used.
    public enum Direction {
        NORTH, EAST, SOUTH, WEST
    }
    
    direction dir = Direction.NORTH;

    

- Character constants

    char myChar = 'A';


    // In Java, characters are mapped to integers (their Unicode codes).
    //   0-9 are consecutive
    //   A-Z are consecutive
    //   a-z are consecutive

    private char randomLetter() {
        return (char) rgen.nextInt('A', 'Z');
    }

    >>> 'A' + 5
    'F'



- Useful character methods

    static boolean isDigit(char ch)
    static boolean isLetter(char ch)
    static boolean isLetterOrDigit(char ch)
    static boolean isLowerCase(char ch)
    static boolean isUpperCase(char ch)
    static boolean isWhitespace(char ch)
    static char toLowerCase(char ch)
    static char toUpperCase(char ch)


    // Implementation Example
    public static char toLowerCase(char ch) {
        if (ch >= 'A' && ch <= 'Z') {
            return ch + 'a' - 'A';
        } else {
            return ch;
        }
    }



- Example - Control Statements Involving Characters

    Because 'char' is a scalar type, it can appear anywhere integers can.

    private boolean isEnglishVowel(char ch) {
        switch(Character.toLowerCase(ch)) {
            case 'a': case 'e': case 'i': case 'o': case 'u':
                return true;
            default:
                return false;
        }
    }



- Useful String Methods

    int length()
    char charAt(int index)

    String substring(int p1, int p2)
    String substring(int p1)
    String trim()
    boolean equals(String s2)

    int indexOf(char c)
    int indexOf(String s)
    int indexOf(char c, int start)
    int indexOf(String s, int start)

    boolean startsWith(String prefix)
    boolean endsWith(String suffix)

    String toUpperCase()
    String toLowerCase()



- The StringTokenizer class

    new StringTokenizer(String str)
    new StringTokenizer(String str, String delims)
    new StringTokenizer(String str, String delims, boolean returnDelims)

    boolean hasMoreTokens()
    String nextToken()



- Example - Pig Latin Translator

    import acm.program.*;
    import java.util.*;

    public class PigLatin extends ConsoleProgram {
        public void run() {
            println("This program translates a line into Pig Latin.");
            String line = readLine("Enter a line: ");
            println(translateLine(line));
        }

        private String translateLine(String line) {
            string result = "";
            StringTokenizer tokenizer = new StringTokenizer(line, DELIMITERS, true);
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (isWord(token)) {
                    token = translateWord(token);
                }
                result += token;
            }
            return result;
        }

        private String translateWord(String word) {
            int vp = findFirstVowel(word);
            if (vp == -1) {
                return word;
            } else if (vp == 0) {
                return word + "way";
            } else {
                String head = word.substring(0, vp);
                String tail = word.substring(vp);
                return tail + head + "ay";
            }
        }

        private int findFirstVowel(String word) {
            for (int i=0; i < word.length(); i++) {
                if (isEnglishVowel(word.charAt(i))) return i;
            }
            return -1;
        }

        private boolean isEnglishVowel(char ch) {
            switch (Character.toLowerCase(ch)) {
                case 'a': case 'e': case 'i': case 'o': case 'u':
                    return true;
                default:
                    return false;
            }
        }

        private boolean isWord(String token) {
            for (int i=0; i < token.length(); i++) {
                char ch = token.charAt(i);
                if (!Character.isLetter(ch)) return false;
            }
            return true;
        }

        private static final String DELIMETERS = "!@#$%^&*()_-+={[}]:;"'|\<,>.?/ `~";
    }