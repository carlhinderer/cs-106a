-------------------------------------------------
CHAPTERS 5-7 - METHODS, OBJECTS, AND CLASSES
-------------------------------------------------

- Method example

    private double celsiusToFarenheit(double c) {
        return 9.0 / 5.0 * c + 32;
    }


    visibility type name (parameters)

    visibility = usually 'public' or 'private'
    type = return value type, or 'void' if none




- Example - Euclidean algorithm

    public int gcd(int x, int y) {
        int r = x % y;
        while (r != 0) {
            x = y;
            y = r;
            r = x % y;
        }
        return y;
    }



- Class Definition

    /* File: name.java */

    visibility class name extends super {
        ... class body ...
    }


    - Extends 'Object' if 'extends' clause is omitted

    - visibility = public | private | protected
          public = visible to every class in the program
          private = visible only within the class that defines it
          protected = visible only to subclasses and classes in the same package



- Example - Student class

    public class Student {
        public Student(String name, int id) {
            studentName = name;
            studentID = id;
        }

        public String getName() {
            return studentName;
        }

        public int getID() {
            return studentID;
        }

        public void setCredits(double credits) {
            creditsEarned = credits;
        }

        public double getCredits() {
            return creditsEarned;
        }

        public void setPaidUp(boolean flag) {
            paidUp = flag;
        }

        public boolean isPaidUp() {
            return paidUp;
        }

        public String toString() {
            return studentName + " (@" + studentId + ")";
        }

        public static final double CREDITS_TO_GRADUATE = 32.0;

        private String studentName;
        private int studentID;
        private double creditsEarned;
        private boolean paidUp;
    }


    // Create student
    Student topStudent = new Student("Hermione Granger", 314159);



- Use of 'this' in constructors

    If you have instance variables that have the same name as constructor parameters,
      you need to use 'this' to qualify the instance variables.

      def Student(String studentName, int studentID) {
          this.studentName = studentName;
          this.studentID = studentID;
      }



- Multiple constructors

    public class Rational {
        private int num;
        private int den;

        public Rational() {
            this(0);
        }

        public Rational(int n) { 
            this(n, 1); 
        }

        public Rational(int x, int y) {
            num = x;
            den = y;
        }
    }



- Superclass constructors

   Constructors in Java classes implicitly call 'super()' before executing, to ensure that
     superclass constructors get called.  If the first line of your constructor contains a
     call to 'super()' or 'this', the superclass constructor will not be called.